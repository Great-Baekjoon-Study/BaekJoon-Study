"""
오늘도 서준이는 버블 정렬 수업 조교를 하고 있다. 아빠가 수업한 내용을 학생들이 잘 이해했는지 문제를 통해서 확인해보자.

N개의 서로 다른 양의 정수가 저장된 배열 A가 있다. 버블 정렬로 배열 A를 오름차순 정렬할 경우 K 번째 교환되는 수를 구해서 우리 서준이를 도와주자.

크기가 N인 배열에 대한 버블 정렬 의사 코드는 다음과 같다.
"""

N, K = map(int, input().split())
# N = 배열의 크기, 오름차순 정렬할 경우 K=번째 나오는 수를 출력

A = list(map(int, input().split())) 
# 배열 A



def bubble_sort(N, A): # A[1..N]을 오름차순 정렬한다.
    count = 0
    # 교환 카운트
    for i in range(N-1, 0, -1): 
        for j in range(i):
            if A[j] > A[j + 1]:
                count += 1
                if count == K:
                    return f"{A[j+1]} {A[j]}"
                A[j], A[j + 1] = A[j+1], A[j]  # 원소 교환
    return -1
    # 교환 횟수가 K보다 작으면 -1 출력
    
solve = bubble_sort(N, A)
print(solve)

#입력
"""
첫째 줄에 배열 A의 크기 N(5 ≤ N ≤ 10,000), 교환 횟수 K(1 ≤ K ≤ N2)가 주어진다.

다음 줄에 서로 다른 배열 A의 원소 A1, A2, ..., AN이 주어진다. (1 ≤ Ai ≤ 109)
6 10
4 6 5 1 3 2
6 12
4 6 5 1 3 2

"""

# 출력
"""
K 번째 교환되는 두 개의 수를 작은 수부터 한 줄에 출력한다. 교환 횟수가 K 보다 작으면 -1을 출력한다.
2 4
-1
"""



